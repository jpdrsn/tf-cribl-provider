// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_user

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"count": schema.Int64Attribute{
				Computed:            true,
				Description:         "number of items present in the items array",
				MarkdownDescription: "number of items present in the items array",
			},
			"disabled": schema.BoolAttribute{
				Required: true,
			},
			"email": schema.StringAttribute{
				Required: true,
			},
			"first": schema.StringAttribute{
				Required: true,
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "Unique ID",
				MarkdownDescription: "Unique ID",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"current_password": schema.StringAttribute{
							Computed: true,
						},
						"disabled": schema.BoolAttribute{
							Computed: true,
						},
						"email": schema.StringAttribute{
							Computed: true,
						},
						"first": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"last": schema.StringAttribute{
							Computed: true,
						},
						"password": schema.StringAttribute{
							Computed: true,
						},
						"roles": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"teams": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"username": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"last": schema.StringAttribute{
				Required: true,
			},
			"password": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"roles": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"username": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type UserModel struct {
	Count    types.Int64  `tfsdk:"count"`
	Disabled types.Bool   `tfsdk:"disabled"`
	Email    types.String `tfsdk:"email"`
	First    types.String `tfsdk:"first"`
	Id       types.String `tfsdk:"id"`
	Items    types.List   `tfsdk:"items"`
	Last     types.String `tfsdk:"last"`
	Password types.String `tfsdk:"password"`
	Roles    types.List   `tfsdk:"roles"`
	Username types.String `tfsdk:"username"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	currentPasswordAttribute, ok := attributes["current_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`current_password is missing from object`)

		return nil, diags
	}

	currentPasswordVal, ok := currentPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`current_password expected to be basetypes.StringValue, was: %T`, currentPasswordAttribute))
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return nil, diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.BoolValue, was: %T`, disabledAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	firstAttribute, ok := attributes["first"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`first is missing from object`)

		return nil, diags
	}

	firstVal, ok := firstAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`first expected to be basetypes.StringValue, was: %T`, firstAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	lastAttribute, ok := attributes["last"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last is missing from object`)

		return nil, diags
	}

	lastVal, ok := lastAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last expected to be basetypes.StringValue, was: %T`, lastAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	rolesAttribute, ok := attributes["roles"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`roles is missing from object`)

		return nil, diags
	}

	rolesVal, ok := rolesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`roles expected to be basetypes.ListValue, was: %T`, rolesAttribute))
	}

	teamsAttribute, ok := attributes["teams"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`teams is missing from object`)

		return nil, diags
	}

	teamsVal, ok := teamsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`teams expected to be basetypes.ListValue, was: %T`, teamsAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		CurrentPassword: currentPasswordVal,
		Disabled:        disabledVal,
		Email:           emailVal,
		First:           firstVal,
		Id:              idVal,
		Last:            lastVal,
		Password:        passwordVal,
		Roles:           rolesVal,
		Teams:           teamsVal,
		Username:        usernameVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	currentPasswordAttribute, ok := attributes["current_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`current_password is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	currentPasswordVal, ok := currentPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`current_password expected to be basetypes.StringValue, was: %T`, currentPasswordAttribute))
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.BoolValue, was: %T`, disabledAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	firstAttribute, ok := attributes["first"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`first is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	firstVal, ok := firstAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`first expected to be basetypes.StringValue, was: %T`, firstAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	lastAttribute, ok := attributes["last"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	lastVal, ok := lastAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last expected to be basetypes.StringValue, was: %T`, lastAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	rolesAttribute, ok := attributes["roles"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`roles is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	rolesVal, ok := rolesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`roles expected to be basetypes.ListValue, was: %T`, rolesAttribute))
	}

	teamsAttribute, ok := attributes["teams"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`teams is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	teamsVal, ok := teamsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`teams expected to be basetypes.ListValue, was: %T`, teamsAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		CurrentPassword: currentPasswordVal,
		Disabled:        disabledVal,
		Email:           emailVal,
		First:           firstVal,
		Id:              idVal,
		Last:            lastVal,
		Password:        passwordVal,
		Roles:           rolesVal,
		Teams:           teamsVal,
		Username:        usernameVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	CurrentPassword basetypes.StringValue `tfsdk:"current_password"`
	Disabled        basetypes.BoolValue   `tfsdk:"disabled"`
	Email           basetypes.StringValue `tfsdk:"email"`
	First           basetypes.StringValue `tfsdk:"first"`
	Id              basetypes.StringValue `tfsdk:"id"`
	Last            basetypes.StringValue `tfsdk:"last"`
	Password        basetypes.StringValue `tfsdk:"password"`
	Roles           basetypes.ListValue   `tfsdk:"roles"`
	Teams           basetypes.ListValue   `tfsdk:"teams"`
	Username        basetypes.StringValue `tfsdk:"username"`
	state           attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["current_password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["disabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["first"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["roles"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["teams"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.CurrentPassword.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["current_password"] = val

		val, err = v.Disabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disabled"] = val

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.First.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["first"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Last.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Roles.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["roles"] = val

		val, err = v.Teams.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["teams"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	rolesVal, d := types.ListValue(types.StringType, v.Roles.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"current_password": basetypes.StringType{},
			"disabled":         basetypes.BoolType{},
			"email":            basetypes.StringType{},
			"first":            basetypes.StringType{},
			"id":               basetypes.StringType{},
			"last":             basetypes.StringType{},
			"password":         basetypes.StringType{},
			"roles": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams": basetypes.ListType{
				ElemType: types.StringType,
			},
			"username": basetypes.StringType{},
		}), diags
	}

	teamsVal, d := types.ListValue(types.StringType, v.Teams.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"current_password": basetypes.StringType{},
			"disabled":         basetypes.BoolType{},
			"email":            basetypes.StringType{},
			"first":            basetypes.StringType{},
			"id":               basetypes.StringType{},
			"last":             basetypes.StringType{},
			"password":         basetypes.StringType{},
			"roles": basetypes.ListType{
				ElemType: types.StringType,
			},
			"teams": basetypes.ListType{
				ElemType: types.StringType,
			},
			"username": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"current_password": basetypes.StringType{},
		"disabled":         basetypes.BoolType{},
		"email":            basetypes.StringType{},
		"first":            basetypes.StringType{},
		"id":               basetypes.StringType{},
		"last":             basetypes.StringType{},
		"password":         basetypes.StringType{},
		"roles": basetypes.ListType{
			ElemType: types.StringType,
		},
		"teams": basetypes.ListType{
			ElemType: types.StringType,
		},
		"username": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"current_password": v.CurrentPassword,
			"disabled":         v.Disabled,
			"email":            v.Email,
			"first":            v.First,
			"id":               v.Id,
			"last":             v.Last,
			"password":         v.Password,
			"roles":            rolesVal,
			"teams":            teamsVal,
			"username":         v.Username,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CurrentPassword.Equal(other.CurrentPassword) {
		return false
	}

	if !v.Disabled.Equal(other.Disabled) {
		return false
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.First.Equal(other.First) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Last.Equal(other.Last) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Roles.Equal(other.Roles) {
		return false
	}

	if !v.Teams.Equal(other.Teams) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"current_password": basetypes.StringType{},
		"disabled":         basetypes.BoolType{},
		"email":            basetypes.StringType{},
		"first":            basetypes.StringType{},
		"id":               basetypes.StringType{},
		"last":             basetypes.StringType{},
		"password":         basetypes.StringType{},
		"roles": basetypes.ListType{
			ElemType: types.StringType,
		},
		"teams": basetypes.ListType{
			ElemType: types.StringType,
		},
		"username": basetypes.StringType{},
	}
}
